name: Test

on:
  pull_request:
  push:

jobs:
  format-test:
    name: Format Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      - name: Check Formatting
        run: deno fmt --check
  type-test:
    name: Type Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      - name: Check dependencies
        run: deno check mod.ts
      - name: Check plugins
        run: deno check plugins/mod.ts
      - name: Check Templates
        run: deno check template/beginner/mod.ts template/minimal/mod.ts
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    concurrency: integration-test
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      - name: Run integration
        # if: ${{ github.actor == 'Skillz4Killz' || github.actor == 'itohatweb' }}
        run: deno test --coverage=coverage -A tests/
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          UNIT_TEST_GUILD_ID: ${{ secrets.UNIT_TEST_GUILD_ID }}
          TEST_ENV: INTEGRATION
          PROXY_REST_SECRET: ${{ secrets.PROXY_REST_SECRET }}
          PROXY_REST_URL: ${{ secrets.PROXY_REST_URL }}
      - name: Create coverage report
        if: github.ref == 'refs/heads/main'
        run: deno coverage --exclude=tests ./coverage --lcov > coverage.lcov
      - name: Collect and upload the coverage report
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v1.0.10
        with:
          file: ./coverage.lcov
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@main
        with:
          deno-version: v1.x
      - name: Run integration
        run: deno test --coverage=coverage --parallel -A tests/
        env:
          TEST_ENV: UNIT
      - name: Create coverage report
        if: github.ref == 'refs/heads/main'
        run: deno coverage --exclude=tests ./coverage --lcov > coverage.lcov
      - name: Collect and upload the coverage report
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v1.0.10
        with:
          file: ./coverage.lcov
